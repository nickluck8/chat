{
	"info": {
		"_postman_id": "010b66ca-a52c-47c7-88f0-d446d1ae85d6",
		"name": "chat",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30154670"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"var accessToken = pm.response.json().accessToken;",
							"pm.globals.set(\"accessToken\", accessToken);",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - accessToken and tokenType\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.accessToken).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.tokenType).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"accessToken is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"tokenType is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.tokenType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"user\",\n    \"password\":\"12345\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"login"
					]
				},
				"description": "\nThis API endpoint sends an HTTP GET request to http://localhost:8080/api/v1/login to retrieve login information. The last execution returned a response with a status code of 200 and a content type of text/xml.\n"
			},
			"response": []
		},
		{
			"name": "getChatRooms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id and name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function (room) {",
							"        pm.expect(room).to.be.an('object');",
							"        pm.expect(room.id).to.exist.and.to.be.a('string');",
							"        pm.expect(room.name).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response is in JSON format\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response array contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/room",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"room"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMessagesbyRoomId",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/messages?roomId=default&size=50",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"messages"
					],
					"query": [
						{
							"key": "roomId",
							"value": "default"
						},
						{
							"key": "size",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteMessage",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/messages/65f4b14c1554bc48c2df2a27",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"messages",
						"65f4b14c1554bc48c2df2a27"
					]
				}
			},
			"response": []
		},
		{
			"name": "createMessage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'id' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The 'roomId' should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.roomId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The username should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"roomId\": \"default\",\n    \"content\": \"hello from another brother\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/messages?roomId=default",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"messages"
					],
					"query": [
						{
							"key": "roomId",
							"value": "default"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getRoomById",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/room/default",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"room",
						"default"
					]
				}
			},
			"response": []
		}
	]
}